# Generated by Django 4.2.13 on 2025-01-25 10:16

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Checkpoint",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("date", models.DateField(verbose_name="Date")),
                (
                    "name",
                    models.CharField(max_length=50, verbose_name="Checkpoint name"),
                ),
                (
                    "scope",
                    models.CharField(
                        choices=[
                            ("class_landmark", "Subject Class Landmark"),
                            ("subject_benchmark", "Subject Benchmark"),
                            ("general_benchmark", "General Benchmark"),
                        ],
                        default="class_landmark",
                        max_length=20,
                        verbose_name="Scope",
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("hidden", "HIDDEN"),
                            ("open", "OPEN"),
                            ("protected", "PROTECTED"),
                        ],
                        default="hidden",
                        max_length=10,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CheckpointField",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("index", models.PositiveIntegerField(verbose_name="Order")),
                (
                    "kind",
                    models.CharField(
                        choices=[
                            ("categorical", "Categorical"),
                            ("comment", "Comment"),
                            ("grade", "Grade"),
                            ("mark", "Mark"),
                            ("mock", "Mock exam"),
                            ("percentage", "Percentage mark"),
                        ],
                        max_length=20,
                        verbose_name="Field type",
                    ),
                ),
                ("name", models.CharField(max_length=30, verbose_name="Field name")),
                (
                    "minmark",
                    models.SmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MaxValueValidator(1000),
                            django.core.validators.MinValueValidator(0),
                        ],
                        verbose_name="Min. mark",
                    ),
                ),
                (
                    "maxmark",
                    models.SmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MaxValueValidator(10000),
                            django.core.validators.MinValueValidator(1),
                        ],
                        verbose_name="Max. mark",
                    ),
                ),
                (
                    "stepsize",
                    models.FloatField(
                        blank=True,
                        choices=[
                            (0.01, "0.01"),
                            (0.05, "0.05"),
                            (0.1, "0.1"),
                            (0.5, "0.5"),
                            (1.0, "1"),
                            (5.0, "5"),
                            (10.0, "10"),
                        ],
                        null=True,
                        verbose_name="Mark step size",
                    ),
                ),
                (
                    "minlength",
                    models.SmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1000),
                        ],
                        verbose_name="Min. character count",
                    ),
                ),
                (
                    "maxlength",
                    models.SmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(10),
                            django.core.validators.MaxValueValidator(2000),
                        ],
                        verbose_name="Max. character count",
                    ),
                ),
                (
                    "categories",
                    models.JSONField(
                        blank=True, default=list, null=True, verbose_name="Categories"
                    ),
                ),
            ],
            options={
                "ordering": ["checkpoint", "index"],
            },
        ),
        migrations.CreateModel(
            name="CheckpointYearGroup",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name="ClassEnrollment",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name="Enrollment",
            fields=[
                (
                    "id",
                    models.AutoField(
                        primary_key=True, serialize=False, verbose_name="Enrollment ID"
                    ),
                ),
            ],
            options={
                "ordering": ["-period__start_date"],
            },
        ),
        migrations.CreateModel(
            name="EnrollmentQualification",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name="Period",
            fields=[
                (
                    "id",
                    models.AutoField(
                        primary_key=True, serialize=False, verbose_name="Period ID"
                    ),
                ),
                ("name", models.CharField(max_length=35, verbose_name="Period name")),
                ("start_date", models.DateField(verbose_name="Start date")),
                ("end_date", models.DateField(verbose_name="End date")),
                ("current", models.BooleanField(default=False)),
            ],
            options={
                "ordering": ["-start_date"],
            },
        ),
        migrations.CreateModel(
            name="School",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=50, verbose_name="School name")),
                (
                    "yeargroup_system",
                    models.CharField(
                        choices=[
                            ("ygs.uk", "UK"),
                            ("ygs.us", "US"),
                            ("ygs.ib", "IB"),
                            ("ygs.custom", "Custom"),
                            ("ygs.def", "Default"),
                        ],
                        default="ygs.custom",
                        max_length=10,
                    ),
                ),
                (
                    "country",
                    django_countries.fields.CountryField(default="GB", max_length=2),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Student",
            fields=[
                (
                    "first_name",
                    models.CharField(max_length=40, verbose_name="First name"),
                ),
                (
                    "last_name",
                    models.CharField(
                        db_index=True, max_length=40, verbose_name="Last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=50, verbose_name="Email address"
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[
                            ("female", "Female"),
                            ("male", "Male"),
                            ("undefined", "Undefined"),
                        ],
                        default="undefined",
                        max_length=10,
                        verbose_name="Gender",
                    ),
                ),
                (
                    "id",
                    models.AutoField(
                        primary_key=True, serialize=False, verbose_name="Student ID"
                    ),
                ),
            ],
            options={
                "ordering": ["last_name", "first_name"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="StudentProgramme",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "name",
                    models.CharField(
                        choices=[
                            (
                                "UK National",
                                [
                                    ("ukn.al", "GCE A levels"),
                                    (
                                        "ukn.aaq",
                                        "Applied Academic Qualifications (AAQs)",
                                    ),
                                    (
                                        "ukn.agq.l3",
                                        "Level 3 Applied General (Vocational Technical) Qualifications",
                                    ),
                                    (
                                        "ukn.epq",
                                        "Level 3 Extended Project Qualifications",
                                    ),
                                    ("ukn.gcse", "GCSEs"),
                                    (
                                        "ukn.vtq.l12",
                                        "Level 1/2 Vocational Technical Qualifications",
                                    ),
                                    ("ukn.pq.l12", "Level 1/2 Project Qualifications"),
                                ],
                            ),
                            (
                                "UK International",
                                [
                                    ("uki.ial", "International A levels"),
                                    ("uki.btec.il3", "BTEC International Level 3"),
                                    ("uki.ipq", "International Project Qualifications"),
                                    ("uki.igcse", "IGCSEs"),
                                    ("uki.olevel", "O Levels"),
                                    ("uki.btec.il2", "BTEC International Level 2"),
                                ],
                            ),
                            (
                                "IB",
                                [
                                    ("ib.dp", "IB Diploma Programme"),
                                    ("ib.cp", "IB Career-related Programme"),
                                    ("ib.myp", "IB Middle Years Programme"),
                                ],
                            ),
                        ],
                        default="nan.undefined",
                        max_length=20,
                        verbose_name="Qualification programme",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="StudentQualification",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name="StudentTag",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=30, verbose_name="Student tag")),
            ],
            options={
                "ordering": ["school", "name"],
            },
        ),
        migrations.CreateModel(
            name="Teacher",
            fields=[
                (
                    "first_name",
                    models.CharField(max_length=40, verbose_name="First name"),
                ),
                (
                    "last_name",
                    models.CharField(
                        db_index=True, max_length=40, verbose_name="Last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=50, verbose_name="Email address"
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[
                            ("female", "Female"),
                            ("male", "Male"),
                            ("undefined", "Undefined"),
                        ],
                        default="undefined",
                        max_length=10,
                        verbose_name="Gender",
                    ),
                ),
                ("id", models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                "ordering": ["last_name", "first_name"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TeacherTag",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=30, verbose_name="Teacher tag")),
            ],
            options={
                "ordering": ["school", "name"],
            },
        ),
        migrations.CreateModel(
            name="YearGroup",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("custom_name", models.CharField(max_length=25)),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("ygl.7", "7th to last year"),
                            ("ygl.6", "6th to last year"),
                            ("ygl.5", "5th to last year"),
                            ("ygl.4", "4th to last year"),
                            ("ygl.3", "3rd to last year"),
                            ("ygl.2", "2nd to last year"),
                            ("ygl.1", "Final year"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="yeargroups",
                        to="register_app.school",
                    ),
                ),
            ],
            options={
                "ordering": ["level"],
            },
        ),
        migrations.CreateModel(
            name="TeachingClass",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=50, verbose_name="Class name")),
                (
                    "enrollment_qualifications",
                    models.ManyToManyField(
                        blank=True,
                        related_name="enrollment_qualifications",
                        through="register_app.ClassEnrollment",
                        to="register_app.enrollmentqualification",
                    ),
                ),
                (
                    "period",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="teaching_classes",
                        to="register_app.period",
                        verbose_name="Academic period",
                    ),
                ),
            ],
        ),
    ]
